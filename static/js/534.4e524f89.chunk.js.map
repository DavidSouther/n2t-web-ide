{"version":3,"file":"static/js/534.4e524f89.chunk.js","mappings":"+WAgDA,SAASA,EACPC,EACAC,GAEA,IAAMC,EAAM,IAAIC,EAAAA,EAAUH,EAAOI,GAAGF,IAAKD,GACnCI,EAAS,IAAIF,EAAAA,EAAUH,EAAOI,GAAGC,OAAQJ,GACzCK,EAAW,IAAIC,EAAAA,GACnB,IAAIJ,EAAAA,EAAUH,EAAOI,GAAGE,SAAUL,IAE9BO,EAAYR,EAAOI,GAAGK,cAE5B,MAAO,CACLH,SAAAA,EACAJ,IAAAA,EACAG,OAAAA,EACAK,MAAOV,EAAOI,GAAGO,UAAUC,UAC3BC,KAAMb,EAAOI,GAAGU,QAChBN,UAAAA,EAEJ,CAqDM,SAAUO,IACd,OAAmCC,EAAAA,EAAAA,YAAWC,EAAAA,GAAtCC,EAAE,EAAFA,GAAIC,EAAS,EAATA,UAAWC,EAAO,EAAPA,QAEjBnB,GAAWoB,EAAAA,EAAAA,SAAwB,WAAe,IAExD,GAA4CC,EAAAA,EAAAA,UAC1C,kBAzDE,SACJJ,EACAC,EACAC,EACAnB,GAEA,IAAMsB,GAASC,EAAAA,EAAAA,IAAOC,EAAAA,GAAAA,MCsDCC,iqBDrDjBtB,GAAKoB,EAAAA,EAAAA,IAAOG,EAAAA,GAAAA,MAASJ,EAAOK,eAC5BC,GAAO,IAAIC,EAAAA,GAASC,KAAK3B,GAC3B4B,GAAU,EACRC,EAAW,CACfC,OAAM,SAACC,GAAkB,MACvBA,EAAM/B,GAAKL,EAAa8B,EAAM5B,GAC9BkC,EAAMN,KAAKG,QAAUA,EACrBG,EAAMN,KAAKrB,UAA4B,QAAnB,EAAGqB,EAAKO,mBAAW,aAAhB,EAAkBC,IAC3C,GAiCF,MAAO,CAAEC,aA/ByB,CAChClC,GAAIL,EAAa8B,EAAM5B,GACvBsC,SAAU,CACRC,MAAO,GACPC,aAAa,GAEfZ,KAAM,CACJG,QAAAA,EACAxB,eAAWkC,IAuBQT,SAAAA,EAAUU,QApBjB,CACdC,KAAI,WACEZ,EACFH,EAAKe,OAELxC,EAAGwC,OAEL3C,EAAS4C,QAAQ,CAAEC,OAAQ,UAC7B,EACAC,MAAK,WACHlB,EAAKkB,QACL3C,EAAG2C,QACH9C,EAAS4C,QAAQ,CAAEC,OAAQ,UAC7B,EACAE,cAAa,WACXhB,GAAWA,EACX/B,EAAS4C,QAAQ,CAAEC,OAAQ,UAC7B,GAIJ,CAQUG,CAAY/B,EAAIC,EAAWC,EAASnB,EAAS,GACnD,CAACiB,EAAIC,EAAWC,EAASnB,IAFnBqC,EAAY,EAAZA,aAAcL,EAAQ,EAARA,SAAUU,EAAO,EAAPA,QAKhC,GAA4BO,EAAAA,EAAAA,GAAgBjB,EAAUK,GAAa,eAA5DH,EAAK,KAAEgB,EAAU,KAGxB,OAFAlD,EAAS4C,QAAUM,EAEZ,CAAEhB,MAAAA,EAAOlC,SAAAA,EAAU0C,QAAAA,EAC5B,C,4CEhBA,EA5GW,WACT,MAAqC5B,IAA7BoB,EAAK,EAALA,MAAOQ,EAAO,EAAPA,QAAS1C,EAAQ,EAARA,SAExB,GAAsBmD,EAAAA,EAAAA,UAAS,0BAAyB,eAAjDC,EAAG,KAAEC,EAAM,KAClB,GAAsBF,EAAAA,EAAAA,UAAS,IAAG,eAA3BG,EAAG,KAAEC,EAAM,KAClB,GAAsBJ,EAAAA,EAAAA,UAAS,IAAG,eAA3BK,EAAG,KAAEC,EAAM,KAEZC,GAAStC,EAAAA,EAAAA,UA0Bf,OAzBAuC,EAAAA,EAAAA,YAAU,WAoBR,OAnBAD,EAAOd,QAAU,yGAgBd,OAhBc,4BACf,WAEE,OADAF,EAAQC,QACD,CACT,GAAC,yBAED,WACE3C,EAAS4C,QAAQ,CAAEC,OAAQ,UAC7B,GAAC,mBAED,WACEH,EAAQI,OACV,GAAC,oBAED,WACE9C,EAAS4C,QAAQ,CAAEC,OAAQ,UAC7B,KAAC,EAhBiB,CAA0Be,EAAAA,IAmBvC,WAAO,IAAD,EACG,QAAd,EAAAF,EAAOd,eAAO,OAAd,EAAgBiB,MAClB,CACF,GAAG,CAACnB,EAAS1C,KAGX,iBAAK8D,UAAU,mBAAkB,WAC/B,SAAC,IAAK,CAACA,UAAU,UAAS,UACxB,2BACE,8BACE,4BACE,2BACE,wBAAI,UACJ,wBAAI,YACJ,wBAAI,cAGR,2BACG5B,EAAM/B,GAAGS,KAAKmD,KAAI,SAACC,EAAMC,GAAG,OAC3BC,EAAiB,CACfF,KAAAA,EACAC,IAAAA,EACAE,YAAaF,IAAQ/B,EAAM/B,GAAGI,WAC9B,cAMZ,UAAC,IAAK,CAACuD,UAAU,KAAI,WACnB,0BACE,8BACE,kBACEM,KAAK,WACLC,SAAU3B,EAAQK,cAClBuB,QAASpC,EAAMN,KAAKG,QACpBwC,KAAK,WACL,wBAIN,SAAC,IAAM,CAACC,OAAQtC,EAAM/B,GAAGC,UACzB,SAAC,IAAQ,CAACqE,SAAUvC,EAAM/B,GAAGE,YAC7B,yBACG6B,EAAM/B,GAAGM,MAAMsD,KAAI,SAACW,EAAOC,GAAC,eAC3B,gCACE,6BACE,0BAAI,YAEF,0BAAqB,QAArB,EAAe,QAAf,EAAOD,EAAME,UAAE,aAAR,EAAUC,YAAI,QAAI,2BAG7B,6BACE,0BACE,wBAAI,WACJ,4BAAM,IAAEH,EAAMI,KAAKC,OAAOC,KAAK,MAAM,WAEvC,0BACE,wBAAI,aACJ,4BAAM,IAAEN,EAAMO,OAAOF,OAAOC,KAAK,MAAM,WAEzC,0BACE,wBAAI,YACJ,4BAAM,IAAEN,EAAMQ,MAAMH,OAAOC,KAAK,MAAM,eAlB9BL,EAqBJ,UAIhB,SAAC,IAAS,CACRjB,OAAQA,EACRN,IAAK,CAACA,EAAKC,EAAQnB,EAAMN,KAAKrB,WAC9B+C,IAAK,CAACA,EAAKC,GACXC,IAAK,CAACA,EAAKC,OAInB,EAIO,SAASS,EAAiB,GAQ7B,IAPFF,EAAI,EAAJA,KACAC,EAAG,EAAHA,IACAE,EAAW,EAAXA,YAMA,OAAQH,EAAKmB,IACX,IAAK,MACL,IAAK,MACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,MACL,IAAK,MACL,IAAK,KACL,IAAK,MACL,IAAK,SACH,OACE,gBAAcrB,UAAWK,EAAc,YAAc,GAAG,WACtD,wBAAKH,EAAKmB,MACV,eAAIC,QAAS,MAFNnB,GAMb,IAAK,UACL,IAAK,QACL,IAAK,OACH,OACE,gBAAcH,UAAWK,EAAc,YAAc,GAAG,WACtD,wBAAKH,EAAKmB,MACV,eAAIC,QAAS,EAAE,SAAEpB,EAAKqB,UAFfpB,GAKb,IAAK,WACL,IAAK,OACH,OACE,gBAAcH,UAAWK,EAAc,YAAc,GAAG,WACtD,wBAAKH,EAAKmB,MACV,wBAAKnB,EAAKa,QACV,wBAAiB,SAAZb,EAAKmB,GAAgBnB,EAAKsB,MAAQtB,EAAKuB,UAHrCtB,GAMb,IAAK,MACL,IAAK,OACH,OACE,gBAAcH,UAAWK,EAAc,YAAc,GAAG,WACtD,wBAAKH,EAAKmB,MACV,wBAAKnB,EAAKwB,WACV,wBAAKxB,EAAKyB,WAHHxB,GAMb,QACE,OACE,eAAcH,UAAWK,EAAc,YAAc,GAAG,UACtD,eAAIiB,QAAS,EAAE,SAAC,aADTnB,GAKjB,C,sMCjKayB,EAAY,SAAH,GAYf,IAXLhC,EAAM,EAANA,OAAO,GAAD,SACNN,IAAG,GAAGA,EAAG,KAAEC,EAAM,KAAEsC,EAAY,iBAC/BnC,IAAG,GAAGA,EAAG,KAAEC,EAAM,KACXH,GADW,SACjBA,IAAG,GAAM,OACTsC,SAAAA,OAAQ,OAAQ,EAQhB,GAA0B7E,EAAAA,EAAAA,YAAWC,EAAAA,GAA7BC,EAAE,EAAFA,GAAIC,EAAS,EAATA,UACZ,GAAiCH,EAAAA,EAAAA,YAAW8E,EAAAA,IAApCC,EAAU,EAAVA,WAAYC,EAAQ,EAARA,SAEpB,GAAgD5C,EAAAA,EAAAA,UAE9C,OAAM,eAFD6C,EAAe,KAAEC,EAAoB,KAItCC,GAAqBC,EAAAA,EAAAA,cACzB,SAACC,GACCH,EAAqBG,GACrBL,EAASM,WAAW,MAAO,SAAUD,EACvC,GACA,CAACL,IAGGO,GAAWH,EAAAA,EAAAA,cAAW,uBAAC,oHAENL,EAAWS,SAAS,KAAD,EAA5B,OAAJC,EAAI,gBACQvF,EAAGwF,SAASD,GAAM,KAAD,EAA7BpD,EAAG,OACTC,EAAOD,GACP,kDAEAsD,QAAQnE,MAAM,EAAD,IACbrB,EAAU,uBAAuB,0DAElC,CAAC4E,EAAY5E,EAAWD,IAE3B,OACE,SAAC,IAAK,CACJ6C,UAAU,cACV6C,QACE,iCACE,gBAAK7C,UAAU,SAAQ,UACrB,8BAEF,gBAAKA,UAAU,SAAQ,SACpBJ,EAAOd,UAAW,SAAC,IAAM,CAACc,OAAQA,EAAOd,aAE5C,0BACE,qBAAU2B,KAAK,QAAO,UACpB,mBAAQqC,QAASN,EAAS,SAAC,wBAIlC,UAED,iBAAK/B,KAAK,UAAUsC,MAAO,CAAE,cAAe,KAAuB,WACjE,gBACEtC,KAAK,MACLuC,GAAG,eACH,gBAAc,oBACd,gBAAmC,QAApBd,EAA0B,UAEzC,8BACE,kBACE5B,KAAK,QACLS,KAAK,YACL,gBAAc,oBACdkC,MAAM,MACNzC,QAA6B,QAApB0B,EACT3B,SAAU,kBAAM6B,EAAmB,MAAM,IACzC,oBAIN,gBACE3B,KAAK,WACL,kBAAgB,eAChBuC,GAAG,oBAAmB,UAEtB,SAAC,IAAM,CACLC,MAAO3D,EACPiB,SAAUhB,EACV2D,QAASC,EAAAA,GAAAA,OACTC,SAAU,MACV3G,UAAWoF,EACXC,SAAUA,OAGd,gBACErB,KAAK,MACLuC,GAAG,eACH,gBAAc,qBACd,gBAAmC,QAApBd,EAA0B,UAEzC,8BACE,kBACE5B,KAAK,QACLS,KAAK,YACL,gBAAc,oBACdkC,MAAM,MACNzC,QAA6B,QAApB0B,EACT3B,SAAU,kBAAM6B,EAAmB,MAAM,IACzC,qBAIN,gBACE3B,KAAK,WACL,kBAAgB,eAChBuC,GAAG,oBACHD,MAAO,CAAEM,SAAU,YAAa,UAEhC,SAAC,IAAM,CACLJ,MAAOvD,EACPa,SAAUZ,EACVuD,QAASI,EAAAA,GAAAA,OACTF,SAAU,MACVtB,SAAUA,OAGd,gBACErB,KAAK,MACLuC,GAAG,eACH,gBAAc,oBACd,gBAAmC,QAApBd,EAA0B,UAEzC,8BACE,kBACE5B,KAAK,QACLS,KAAK,YACL,gBAAc,oBACdkC,MAAM,MACNzC,QAA6B,QAApB0B,EACT3B,SAAU,kBAAM6B,EAAmB,MAAM,IACzC,oBAIN,gBACE3B,KAAK,WACLuC,GAAG,oBACH,kBAAgB,eAAc,UAE9B,SAAC,IAAS,CAACtD,IAAKA,EAAKF,IAAKA,UAKpC,C,+JCxKapD,EAGX,0CACA,WACEmH,EACQrH,GAAoC,4BAE5C,cAAMqH,EAAQA,EAAOC,KAAM,IAAG,qCAFtB,EAAAtH,SAAAA,EAAoC,CAG9C,CAKC,OALA,qEAEQ,WAAWiB,EAAgBuF,GAAY,0IAC7BvF,EAAIuF,GAAI,OACzBe,KAAKvH,SAAS4C,QAAQ,CAAEC,OAAQ,WAAsB,gDACvD,qDALA,MAKA,EAXD,C,QAAQ2E,G","sources":["../../components/src/stores/vm.store.ts","../../projects/src/samples/vm.ts","pages/vm.tsx","shell/test_panel.tsx","../../components/src/stores/imm_memory.ts"],"sourcesContent":["import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\n// import { VM as multVM } from \"@nand2tetris/simulator/testing/mult.js\";\nimport { FIBONACCI } from \"@nand2tetris/projects/samples/vm.js\";\nimport { Dispatch, MutableRefObject, useContext, useMemo, useRef } from \"react\";\nimport { BaseContext } from \"./base.context.js\";\nimport { useImmerReducer } from \"../react.js\";\nimport {\n  KeyboardAdapter,\n  MemoryAdapter,\n  MemoryKeyboard,\n} from \"@nand2tetris/simulator/cpu/memory.js\";\nimport { VMTest } from \"@nand2tetris/simulator/test/vmtst.js\";\nimport { VM, VmInstruction } from \"@nand2tetris/simulator/languages/vm.js\";\nimport { ImmMemory } from \"./imm_memory.js\";\nimport { unwrap } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { VmFrame, Vm } from \"@nand2tetris/simulator/vm/vm.js\";\nimport { Span } from \"@nand2tetris/simulator/languages/base.js\";\n\nexport interface VmSim {\n  RAM: MemoryAdapter;\n  Screen: MemoryAdapter;\n  Keyboard: KeyboardAdapter;\n  Stack: VmFrame[];\n  Prog: VmInstruction[];\n  highlight: number;\n}\n\nexport interface VMTestSim {\n  useTest: boolean;\n  highlight: Span | undefined;\n}\n\nexport interface VmPageState {\n  vm: VmSim;\n  controls: ControlsState;\n  test: VMTestSim;\n}\n\nexport interface ControlsState {\n  runningTest: boolean;\n  error: string;\n}\n\nexport type VmStoreDispatch = Dispatch<{\n  action: keyof ReturnType<typeof makeVmStore>[\"reducers\"];\n  payload?: unknown;\n}>;\n\nfunction reduceVMTest(\n  vmTest: VMTest,\n  dispatch: MutableRefObject<VmStoreDispatch>\n): VmSim {\n  const RAM = new ImmMemory(vmTest.vm.RAM, dispatch);\n  const Screen = new ImmMemory(vmTest.vm.Screen, dispatch);\n  const Keyboard = new MemoryKeyboard(\n    new ImmMemory(vmTest.vm.Keyboard, dispatch)\n  );\n  const highlight = vmTest.vm.derivedLine();\n\n  return {\n    Keyboard,\n    RAM,\n    Screen,\n    Stack: vmTest.vm.vmStack().reverse(),\n    Prog: vmTest.vm.program,\n    highlight,\n  };\n}\n\nexport function makeVmStore(\n  fs: FileSystem,\n  setStatus: (status: string) => void,\n  storage: Record<string, string>,\n  dispatch: MutableRefObject<VmStoreDispatch>\n) {\n  const parsed = unwrap(VM.parse(FIBONACCI));\n  const vm = unwrap(Vm.build(parsed.instructions));\n  const test = new VMTest().with(vm);\n  let useTest = false;\n  const reducers = {\n    update(state: VmPageState) {\n      state.vm = reduceVMTest(test, dispatch);\n      state.test.useTest = useTest;\n      state.test.highlight = test.currentStep?.span;\n    },\n  };\n  const initialState: VmPageState = {\n    vm: reduceVMTest(test, dispatch),\n    controls: {\n      error: \"\",\n      runningTest: false,\n    },\n    test: {\n      useTest,\n      highlight: undefined,\n    },\n  };\n  const actions = {\n    step() {\n      if (useTest) {\n        test.step();\n      } else {\n        vm.step();\n      }\n      dispatch.current({ action: \"update\" });\n    },\n    reset() {\n      test.reset();\n      vm.reset();\n      dispatch.current({ action: \"update\" });\n    },\n    toggleUseTest() {\n      useTest = !useTest;\n      dispatch.current({ action: \"update\" });\n    },\n  };\n\n  return { initialState, reducers, actions };\n}\n\nexport function useVmPageStore() {\n  const { fs, setStatus, storage } = useContext(BaseContext);\n\n  const dispatch = useRef<VmStoreDispatch>(() => undefined);\n\n  const { initialState, reducers, actions } = useMemo(\n    () => makeVmStore(fs, setStatus, storage, dispatch),\n    [fs, setStatus, storage, dispatch]\n  );\n\n  const [state, dispatcher] = useImmerReducer(reducers, initialState);\n  dispatch.current = dispatcher;\n\n  return { state, dispatch, actions };\n}\n","export const SIMPLE_FUNCTION = `\n// __implicit\n  push constant 3\n  push constant 4\n  call mult 2\n\n// returns x * y as sum i = 0 to y x\n// x = arg 0\n// y = arg 1\n// sum = local 0\n// i = local 1\nfunction mult 2\nlabel WHILE_LOOP\n  push local 1\n  push argument 1\n  lt\n  not\n  if-goto WHILE_END\n  push local 0\n  push argument 0\n  add\n  pop local 0\n  push local 1\n  push constant 1\n  add\n  pop local 1\n  goto WHILE_LOOP\nlabel WHILE_END\n  push local 0\n  return\n`;\n\nexport const NESTED_FUNCTION = `\n// Sys.vm for NestedCall test.\n\n// Sys.init()\n//\n// Calls Sys.main() and stores return value in temp 1.\n// Does not return.  (Enters infinite loop.)\n\nfunction Sys.init 0\npush constant 4000\t// test THIS and THAT context save\npop pointer 0\npush constant 5000\npop pointer 1\ncall Sys.main 0\npop temp 1\nlabel LOOP\ngoto LOOP\n\n// Sys.main()\n//\n// Sets locals 1, 2 and 3, leaving locals 0 and 4 unchanged to test\n// default local initialization to 0.  (RAM set to -1 by test setup.)\n// Calls Sys.add12(123) and stores return value (135) in temp 0.\n// Returns local 0 + local 1 + local 2 + local 3 + local 4 (456) to confirm\n// that locals were not mangled by function call.\n\nfunction Sys.main 5\npush constant 4001\npop pointer 0\npush constant 5001\npop pointer 1\npush constant 200\npop local 1\npush constant 40\npop local 2\npush constant 6\npop local 3\npush constant 123\ncall Sys.add12 1\npop temp 0\npush local 0\npush local 1\npush local 2\npush local 3\npush local 4\nadd\nadd\nadd\nadd\nreturn\n\n// Sys.add12(int n)\n//\n// Returns n+12.\n\nfunction Sys.add12 0\npush constant 4002\npop pointer 0\npush constant 5002\npop pointer 1\npush argument 0\npush constant 12\nadd\nreturn\n`;\n\nexport const FIB_MAIN = `\nfunction Main.fibonacci 0\npush argument 0\npush constant 2\nlt                     // checks if n<2\nif-goto IF_TRUE\ngoto IF_FALSE\nlabel IF_TRUE          // if n<2, return n\npush argument 0        \nreturn\nlabel IF_FALSE         // if n>=2, returns fib(n-2)+fib(n-1)\npush argument 0\npush constant 2\nsub\ncall Main.fibonacci 1  // computes fib(n-2)\npush argument 0\npush constant 1\nsub\ncall Main.fibonacci 1  // computes fib(n-1)\nadd                    // returns fib(n-1) + fib(n-2)\nreturn\n`;\n\nexport const FIB_SYS = `\nfunction Sys.init 0\npush constant 4\ncall Main.fibonacci 1   // computes the 4'th fibonacci element\nlabel WHILE\ngoto WHILE              // loops infinitely\n`;\n\nexport const FIBONACCI = FIB_MAIN + FIB_SYS;\n\nexport const STATIC_CLASS_1 = `function Class1.set 0\npush argument 0\npop static 0\npush argument 1\npop static 1\npush constant 0\nreturn\n\n// Returns static[0] - static[1].\nfunction Class1.get 0\npush static 0\npush static 1\nsub\nreturn\n`;\nexport const STATIC_CLASS_2 = `function Class2.set 0\npush argument 0\npop static 0\npush argument 1\npop static 1\npush constant 0\nreturn\n\n// Returns static[0] - static[1].\nfunction Class2.get 0\npush static 0\npush static 1\nsub\nreturn\n`;\n\nexport const STATIC_SYS = `function Sys.init 0\npush constant 6\npush constant 8\ncall Class1.set 2\npop temp 0 // Dumps the return value\npush constant 23\npush constant 15\ncall Class2.set 2\npop temp 0 // Dumps the return value\ncall Class1.get 0\ncall Class2.get 0\nlabel WHILE\ngoto WHILE\n`;\n\nexport const STATIC = STATIC_CLASS_1 + STATIC_CLASS_2 + STATIC_SYS;\n","import * as VMLang from \"@nand2tetris/simulator/languages/vm.js\";\nimport { Keyboard } from \"@nand2tetris/components/chips/keyboard.js\";\nimport { Screen } from \"@nand2tetris/components/chips/screen.js\";\nimport { useVmPageStore } from \"@nand2tetris/components/stores/vm.store.js\";\nimport { Timer } from \"@nand2tetris/simulator/timer.js\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { Panel } from \"../shell/panel\";\nimport { TestPanel } from \"../shell/test_panel\";\nimport \"./vm.scss\";\n\nconst VM = () => {\n  const { state, actions, dispatch } = useVmPageStore();\n\n  const [tst, setTst] = useState(\"repeat {\\n\\tvmstep;\\n}\");\n  const [out, setOut] = useState(\"\");\n  const [cmp, setCmp] = useState(\"\");\n\n  const runner = useRef<Timer>();\n  useEffect(() => {\n    runner.current = new (class ChipTimer extends Timer {\n      override tick() {\n        actions.step();\n        return false;\n      }\n\n      override finishFrame() {\n        dispatch.current({ action: \"update\" });\n      }\n\n      override reset() {\n        actions.reset();\n      }\n\n      override toggle() {\n        dispatch.current({ action: \"update\" });\n      }\n    })();\n\n    return () => {\n      runner.current?.stop();\n    };\n  }, [actions, dispatch]);\n\n  return (\n    <div className=\"Page VmPage grid\">\n      <Panel className=\"program\">\n        <main>\n          <table>\n            <thead>\n              <tr>\n                <td>Inst</td>\n                <td>Target</td>\n                <td>Val</td>\n              </tr>\n            </thead>\n            <tbody>\n              {state.vm.Prog.map((inst, key) =>\n                VMInstructionRow({\n                  inst,\n                  key,\n                  highlighted: key === state.vm.highlight,\n                })\n              )}\n            </tbody>\n          </table>\n        </main>\n      </Panel>\n      <Panel className=\"IO\">\n        <div>\n          <label>\n            <input\n              type=\"checkbox\"\n              onChange={actions.toggleUseTest}\n              checked={state.test.useTest}\n              role=\"switch\"\n            />\n            Use Test Script\n          </label>\n        </div>\n        <Screen memory={state.vm.Screen} />\n        <Keyboard keyboard={state.vm.Keyboard} />\n        <div>\n          {state.vm.Stack.map((frame, i) => (\n            <section key={i}>\n              <header>\n                <h3>\n                  Function\n                  <code>{frame.fn?.name ?? \"Unknown Function\"}</code>\n                </h3>\n              </header>\n              <main>\n                <p>\n                  <em>Args:</em>\n                  <code>[{frame.args.values.join(\", \")}]</code>\n                </p>\n                <p>\n                  <em>Locals:</em>\n                  <code>[{frame.locals.values.join(\", \")}]</code>\n                </p>\n                <p>\n                  <em>Stack:</em>\n                  <code>[{frame.stack.values.join(\", \")}]</code>\n                </p>\n              </main>\n            </section>\n          ))}\n        </div>\n      </Panel>\n      <TestPanel\n        runner={runner}\n        tst={[tst, setTst, state.test.highlight]}\n        out={[out, setOut]}\n        cmp={[cmp, setCmp]}\n      />\n    </div>\n  );\n};\n\nexport default VM;\n\nexport function VMInstructionRow({\n  inst,\n  key,\n  highlighted,\n}: {\n  inst: VMLang.VmInstruction;\n  key: number;\n  highlighted: boolean;\n}) {\n  switch (inst.op) {\n    case \"add\":\n    case \"and\":\n    case \"eq\":\n    case \"gt\":\n    case \"lt\":\n    case \"neg\":\n    case \"not\":\n    case \"or\":\n    case \"sub\":\n    case \"return\":\n      return (\n        <tr key={key} className={highlighted ? \"highlight\" : \"\"}>\n          <td>{inst.op}</td>\n          <td colSpan={2}></td>\n        </tr>\n      );\n\n    case \"if-goto\":\n    case \"label\":\n    case \"goto\":\n      return (\n        <tr key={key} className={highlighted ? \"highlight\" : \"\"}>\n          <td>{inst.op}</td>\n          <td colSpan={2}>{inst.label}</td>\n        </tr>\n      );\n    case \"function\":\n    case \"call\":\n      return (\n        <tr key={key} className={highlighted ? \"highlight\" : \"\"}>\n          <td>{inst.op}</td>\n          <td>{inst.name}</td>\n          <td>{inst.op === \"call\" ? inst.nArgs : inst.nVars}</td>\n        </tr>\n      );\n    case \"pop\":\n    case \"push\":\n      return (\n        <tr key={key} className={highlighted ? \"highlight\" : \"\"}>\n          <td>{inst.op}</td>\n          <td>{inst.segment}</td>\n          <td>{inst.offset}</td>\n        </tr>\n      );\n    default:\n      return (\n        <tr key={key} className={highlighted ? \"highlight\" : \"\"}>\n          <td colSpan={3}>Unknown</td>\n        </tr>\n      );\n  }\n}\n","import {\n  CSSProperties,\n  Dispatch,\n  RefObject,\n  useCallback,\n  useContext,\n  useState,\n} from \"react\";\nimport { Trans } from \"@lingui/macro\";\nimport { DiffTable } from \"@nand2tetris/components/difftable.js\";\nimport { Runbar } from \"@nand2tetris/components/runbar.js\";\nimport { CMP } from \"@nand2tetris/simulator/languages/cmp.js\";\nimport { BaseContext } from \"@nand2tetris/components/stores/base.context.js\";\nimport { Timer } from \"@nand2tetris/simulator/timer.js\";\nimport { TST } from \"@nand2tetris/simulator/languages/tst.js\";\nimport { AppContext } from \"../App.context\";\nimport { Editor } from \"./editor\";\nimport { Panel } from \"./panel\";\nimport { Span } from \"@nand2tetris/simulator/languages/base\";\n\nexport const TestPanel = ({\n  runner,\n  tst: [tst, setTst, tstHighlight],\n  cmp: [cmp, setCmp],\n  out: [out],\n  disabled = false,\n}: {\n  runner: RefObject<Timer | undefined>;\n  tst: [string, Dispatch<string>, Span | undefined];\n  cmp: [string, Dispatch<string>];\n  out: [string, Dispatch<string>];\n  disabled?: boolean;\n}) => {\n  const { fs, setStatus } = useContext(BaseContext);\n  const { filePicker, tracking } = useContext(AppContext);\n\n  const [selectedTestTab, doSetSelectedTestTab] = useState<\n    \"tst\" | \"cmp\" | \"out\"\n  >(\"tst\");\n\n  const setSelectedTestTab = useCallback(\n    (tab: typeof selectedTestTab) => {\n      doSetSelectedTestTab(tab);\n      tracking.trackEvent(\"tab\", \"change\", tab);\n    },\n    [tracking]\n  );\n\n  const loadTest = useCallback(async () => {\n    try {\n      const path = await filePicker.select();\n      const tst = await fs.readFile(path);\n      setTst(tst);\n      // await compile.current({ tst });\n    } catch (e) {\n      console.error(e);\n      setStatus(`Failed to load test`);\n    }\n  }, [filePicker, setStatus, fs]);\n\n  return (\n    <Panel\n      className=\"_test_panel\"\n      header={\n        <>\n          <div className=\"flex-0\">\n            <Trans>Test</Trans>\n          </div>\n          <div className=\"flex-1\">\n            {runner.current && <Runbar runner={runner.current} />}\n          </div>\n          <div>\n            <fieldset role=\"group\">\n              <button onClick={loadTest}>📂</button>\n            </fieldset>\n          </div>\n        </>\n      }\n    >\n      <div role=\"tablist\" style={{ \"--tab-count\": \"3\" } as CSSProperties}>\n        <div\n          role=\"tab\"\n          id=\"test-tab-tst\"\n          aria-controls=\"test-tabpanel-tst\"\n          aria-selected={selectedTestTab === \"tst\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-tst\"\n              value=\"tst\"\n              checked={selectedTestTab === \"tst\"}\n              onChange={() => setSelectedTestTab(\"tst\")}\n            />\n            Test Script\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          aria-labelledby=\"test-tab-tst\"\n          id=\"test-tabpanel-tst\"\n        >\n          <Editor\n            value={tst}\n            onChange={setTst}\n            grammar={TST.parser}\n            language={\"tst\"}\n            highlight={tstHighlight}\n            disabled={disabled}\n          />\n        </div>\n        <div\n          role=\"tab\"\n          id=\"test-tab-cmp\"\n          aria-controls=\"test-tablpanel-cmp\"\n          aria-selected={selectedTestTab === \"cmp\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-cmp\"\n              value=\"cmp\"\n              checked={selectedTestTab === \"cmp\"}\n              onChange={() => setSelectedTestTab(\"cmp\")}\n            />\n            Compare File\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          aria-labelledby=\"test-tab-cmp\"\n          id=\"test-tabpanel-cmp\"\n          style={{ position: \"relative\" }}\n        >\n          <Editor\n            value={cmp}\n            onChange={setCmp}\n            grammar={CMP.parser}\n            language={\"cmp\"}\n            disabled={disabled}\n          />\n        </div>\n        <div\n          role=\"tab\"\n          id=\"test-tab-out\"\n          aria-controls=\"test-tabpanel-out\"\n          aria-selected={selectedTestTab === \"out\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-out\"\n              value=\"out\"\n              checked={selectedTestTab === \"out\"}\n              onChange={() => setSelectedTestTab(\"out\")}\n            />\n            Output File\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          id=\"test-tabpanel-out\"\n          aria-labelledby=\"test-tab-out\"\n        >\n          <DiffTable cmp={cmp} out={out} />\n        </div>\n      </div>\n    </Panel>\n  );\n};\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { MemoryAdapter, SubMemory } from \"@nand2tetris/simulator/cpu/memory.js\";\nimport { MutableRefObject } from \"react\";\n\nexport class ImmMemory<\n  Action extends { action: \"update\" },\n  Dispatch extends (a: Action) => void\n> extends SubMemory {\n  constructor(\n    parent: MemoryAdapter,\n    private dispatch: MutableRefObject<Dispatch>\n  ) {\n    super(parent, parent.size, 0);\n  }\n\n  override async load(fs: FileSystem, path: string): Promise<void> {\n    await super.load(fs, path);\n    this.dispatch.current({ action: \"update\" } as Action);\n  }\n}\n"],"names":["reduceVMTest","vmTest","dispatch","RAM","ImmMemory","vm","Screen","Keyboard","MemoryKeyboard","highlight","derivedLine","Stack","vmStack","reverse","Prog","program","useVmPageStore","useContext","BaseContext","fs","setStatus","storage","useRef","useMemo","parsed","unwrap","VM","FIB_MAIN","Vm","instructions","test","VMTest","with","useTest","reducers","update","state","currentStep","span","initialState","controls","error","runningTest","undefined","actions","step","current","action","reset","toggleUseTest","makeVmStore","useImmerReducer","dispatcher","useState","tst","setTst","out","setOut","cmp","setCmp","runner","useEffect","Timer","stop","className","map","inst","key","VMInstructionRow","highlighted","type","onChange","checked","role","memory","keyboard","frame","i","fn","name","args","values","join","locals","stack","op","colSpan","label","nArgs","nVars","segment","offset","TestPanel","tstHighlight","disabled","AppContext","filePicker","tracking","selectedTestTab","doSetSelectedTestTab","setSelectedTestTab","useCallback","tab","trackEvent","loadTest","select","path","readFile","console","header","onClick","style","id","value","grammar","TST","language","position","CMP","parent","size","this","SubMemory"],"sourceRoot":""}