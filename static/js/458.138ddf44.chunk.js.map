{"version":3,"file":"static/js/458.138ddf44.chunk.js","mappings":"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","sources":["../../simulator/src/testing/mult.ts","../../components/src/stores/cpu.store.ts","pages/cpu.tsx","shell/test_panel.tsx","../../components/src/stores/imm_memory.ts"],"sourcesContent":["export const JACK = `\nwhile (R0 > 0) {\n    R2 = R2 + R1\n    R0 = R0 - 1\n}`;\n\nexport const VM = `\n(_loop_start)\n  push constant 0\n  push arg 0\n  eq\n  jump-eq _loop_end\n\n  push arg 1\n  push local 0\n  add\n  pop local 0\n\n  push arg 0\n  push constant 1\n  sub\n  pop arg 0\n\n  jump _loop_start\n\n(_loop_end)\n  jump loop_end\n`;\n\nexport const ASM = `\n@R2\nM=0\n(LOOP)\n  @R0\n  D=M\n  @END\n  D;JEQ\n\n  @R1\n  D=M\n  @R2\n  D=D+M\n  M=D\n\n  @R0\n  M=M-1\n  @LOOP\n  0;JMP\n(END)\n  @END\n  0;JMP\n`;\n\nexport const HACK = new Int16Array([\n  0x0002, // @R2\n  0xda88, // M=0\n  0x0000, // (LOOP) @R0\n  0xfc10, // D=M\n  0x000f, // @END\n  0xd302, // D;JEQ\n  0x0001, // @R1\n  0xfc10, // D=M\n  0x0002, // @R2\n  0xf090, // D=D+M\n  0xd308, // M=D\n  0x0000, // @R0\n  0xfc88, // M=M-1\n  0x0002, // @LOOP\n  0xda87, // 0;JMP\n  0x000f, // (END) @END\n  0xda87, // 0;JMP\n]);\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs\";\nimport {\n  KeyboardAdapter,\n  MemoryAdapter,\n  MemoryKeyboard,\n  ROM,\n} from \"@nand2tetris/simulator/cpu/memory.js\";\nimport { Span } from \"@nand2tetris/simulator/languages/base.js\";\nimport { HACK } from \"@nand2tetris/simulator/testing/mult.js\";\nimport { CPUTest } from \"@nand2tetris/simulator/test/cputst.js\";\nimport { Dispatch, MutableRefObject, useContext, useMemo, useRef } from \"react\";\nimport { useImmerReducer } from \"../react.js\";\nimport { BaseContext } from \"./base.context.js\";\nimport { ImmMemory } from \"./imm_memory.js\";\n\nexport interface CpuSim {\n  A: number;\n  D: number;\n  PC: number;\n  RAM: MemoryAdapter;\n  ROM: MemoryAdapter;\n  Screen: MemoryAdapter;\n  Keyboard: KeyboardAdapter;\n}\n\nexport interface CPUTestSim {\n  useTest: boolean;\n  highlight: Span | undefined;\n}\n\nexport interface CpuPageState {\n  sim: CpuSim;\n  test: CPUTestSim;\n}\n\nfunction reduceCPUTest(\n  cpuTest: CPUTest,\n  dispatch: MutableRefObject<CpuStoreDispatch>\n): CpuSim {\n  const RAM = new ImmMemory(cpuTest.cpu.RAM, dispatch);\n  const ROM = new ImmMemory(cpuTest.cpu.ROM, dispatch);\n  const Screen = new ImmMemory(cpuTest.cpu.Screen, dispatch);\n  const Keyboard = new MemoryKeyboard(new ImmMemory(cpuTest.cpu.RAM, dispatch));\n\n  return {\n    A: cpuTest.cpu.A,\n    D: cpuTest.cpu.D,\n    PC: cpuTest.cpu.PC,\n    RAM,\n    ROM,\n    Screen,\n    Keyboard,\n  };\n}\n\nexport type CpuStoreDispatch = Dispatch<{\n  action: keyof ReturnType<typeof makeCpuStore>[\"reducers\"];\n  payload?: unknown;\n}>;\n\nexport function makeCpuStore(\n  fs: FileSystem,\n  setStatus: (status: string) => void,\n  storage: Record<string, string>,\n  dispatch: MutableRefObject<CpuStoreDispatch>\n) {\n  const test = new CPUTest(new ROM(HACK));\n  let useTest = false;\n\n  const reducers = {\n    update(state: CpuPageState) {\n      state.sim = reduceCPUTest(test, dispatch);\n      state.test.useTest = useTest;\n      state.test.highlight = test.currentStep?.span;\n    },\n  };\n\n  const actions = {\n    tick() {\n      if (useTest) {\n        test.step();\n      } else {\n        test.cpu.tick();\n      }\n    },\n\n    resetRAM() {\n      // test.cpu.RAM.set(0, 3);\n      // test.cpu.RAM.set(1, 2);\n      test.cpu.RAM.loadBytes([]);\n      dispatch.current({ action: \"update\" });\n      setStatus(\"Reset RAM\");\n    },\n\n    toggleUseTest() {\n      useTest = !useTest;\n      dispatch.current({ action: \"update\" });\n    },\n\n    resetCPU() {\n      test.reset();\n      dispatch.current({ action: \"update\" });\n      setStatus(\"Reset CPU\");\n    },\n\n    reset() {\n      this.resetRAM();\n      this.resetCPU();\n      setStatus(\"Reset CPU & RAM\");\n    },\n  };\n\n  const initialState = {\n    sim: reduceCPUTest(test, dispatch),\n    test: {\n      useTest,\n      highlight: test.currentStep?.span,\n    },\n  };\n\n  return { initialState, reducers, actions };\n}\n\nexport function useCpuPageStore() {\n  const { fs, setStatus, storage } = useContext(BaseContext);\n\n  const dispatch = useRef<CpuStoreDispatch>(() => undefined);\n\n  const { initialState, reducers, actions } = useMemo(\n    () => makeCpuStore(fs, setStatus, storage, dispatch),\n    [fs, setStatus, storage, dispatch]\n  );\n\n  const [state, dispatcher] = useImmerReducer(reducers, initialState);\n  dispatch.current = dispatcher;\n\n  return { state, dispatch, actions };\n}\n","import { Timer } from \"@nand2tetris/simulator/timer.js\";\n\nimport MemoryComponent from \"@nand2tetris/components/chips/memory.js\";\nimport { Screen } from \"@nand2tetris/components/chips/screen.js\";\nimport { Keyboard } from \"@nand2tetris/components/chips/keyboard\";\nimport { useCpuPageStore } from \"@nand2tetris/components/stores/cpu.store\";\nimport { useEffect, useRef, useState } from \"react\";\n\nimport \"./cpu.scss\";\nimport { TestPanel } from \"src/shell/test_panel\";\nimport { Panel } from \"src/shell/panel\";\n\nexport const CPU = () => {\n  const { state, actions, dispatch } = useCpuPageStore();\n\n  const [tst, setTst] = useState(\"repeat {\\n\\tticktock;\\n}\");\n  const [out, setOut] = useState(\"\");\n  const [cmp, setCmp] = useState(\"\");\n\n  const runner = useRef<Timer>();\n  useEffect(() => {\n    runner.current = new (class ChipTimer extends Timer {\n      override tick() {\n        actions.tick();\n        return false;\n      }\n\n      override finishFrame() {\n        dispatch.current({ action: \"update\" });\n      }\n\n      override reset() {\n        actions.reset();\n      }\n\n      override toggle() {\n        dispatch.current({ action: \"update\" });\n      }\n    })();\n\n    return () => {\n      runner.current?.stop();\n    };\n  }, [actions, dispatch]);\n\n  return (\n    <div className=\"Page CpuPage grid\">\n      <MemoryComponent\n        name=\"ROM\"\n        memory={state.sim.ROM}\n        highlight={state.sim.PC}\n        format=\"asm\"\n        editable={false}\n      />\n      <MemoryComponent name=\"RAM\" memory={state.sim.RAM} format=\"hex\" />\n      <Panel className=\"IO\">\n        <div>\n          <label>\n            <input\n              type=\"checkbox\"\n              onChange={actions.toggleUseTest}\n              checked={state.test.useTest}\n              role=\"switch\"\n            />\n            Use Test Script\n          </label>\n        </div>\n        <Screen memory={state.sim.Screen}></Screen>\n        <Keyboard keyboard={state.sim.Keyboard} />\n        <div>\n          <dl>\n            <dt>PC</dt>\n            <dd>{state.sim.PC}</dd>\n            <dt>A</dt>\n            <dd>{state.sim.A}</dd>\n            <dt>D</dt>\n            <dd>{state.sim.D}</dd>\n          </dl>\n        </div>\n      </Panel>\n      <TestPanel\n        disabled={!state.test.useTest}\n        runner={runner}\n        tst={[tst, setTst, state.test.highlight]}\n        out={[out, setOut]}\n        cmp={[cmp, setCmp]}\n      />\n    </div>\n  );\n};\n\nexport default CPU;\n","import {\n  CSSProperties,\n  Dispatch,\n  RefObject,\n  useCallback,\n  useContext,\n  useState,\n} from \"react\";\nimport { Trans } from \"@lingui/macro\";\nimport { DiffTable } from \"@nand2tetris/components/difftable.js\";\nimport { Runbar } from \"@nand2tetris/components/runbar.js\";\nimport { CMP } from \"@nand2tetris/simulator/languages/cmp.js\";\nimport { BaseContext } from \"@nand2tetris/components/stores/base.context.js\";\nimport { Timer } from \"@nand2tetris/simulator/timer.js\";\nimport { TST } from \"@nand2tetris/simulator/languages/tst.js\";\nimport { AppContext } from \"../App.context\";\nimport { Editor } from \"./editor\";\nimport { Panel } from \"./panel\";\nimport { Span } from \"@nand2tetris/simulator/languages/base\";\n\nexport const TestPanel = ({\n  runner,\n  tst: [tst, setTst, tstHighlight],\n  cmp: [cmp, setCmp],\n  out: [out],\n  disabled = false,\n}: {\n  runner: RefObject<Timer | undefined>;\n  tst: [string, Dispatch<string>, Span | undefined];\n  cmp: [string, Dispatch<string>];\n  out: [string, Dispatch<string>];\n  disabled?: boolean;\n}) => {\n  const { fs, setStatus } = useContext(BaseContext);\n  const { filePicker, tracking } = useContext(AppContext);\n\n  const [selectedTestTab, doSetSelectedTestTab] = useState<\n    \"tst\" | \"cmp\" | \"out\"\n  >(\"tst\");\n\n  const setSelectedTestTab = useCallback(\n    (tab: typeof selectedTestTab) => {\n      doSetSelectedTestTab(tab);\n      tracking.trackEvent(\"tab\", \"change\", tab);\n    },\n    [tracking]\n  );\n\n  const loadTest = useCallback(async () => {\n    try {\n      const path = await filePicker.select();\n      const tst = await fs.readFile(path);\n      setTst(tst);\n      // await compile.current({ tst });\n    } catch (e) {\n      console.error(e);\n      setStatus(`Failed to load test`);\n    }\n  }, [filePicker, setStatus, fs]);\n\n  return (\n    <Panel\n      className=\"_test_panel\"\n      header={\n        <>\n          <div className=\"flex-0\">\n            <Trans>Test</Trans>\n          </div>\n          <div className=\"flex-1\">\n            {runner.current && <Runbar runner={runner.current} />}\n          </div>\n          <div>\n            <fieldset role=\"group\">\n              <button onClick={loadTest}>📂</button>\n            </fieldset>\n          </div>\n        </>\n      }\n    >\n      <div role=\"tablist\" style={{ \"--tab-count\": \"3\" } as CSSProperties}>\n        <div\n          role=\"tab\"\n          id=\"test-tab-tst\"\n          aria-controls=\"test-tabpanel-tst\"\n          aria-selected={selectedTestTab === \"tst\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-tst\"\n              value=\"tst\"\n              checked={selectedTestTab === \"tst\"}\n              onChange={() => setSelectedTestTab(\"tst\")}\n            />\n            Test Script\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          aria-labelledby=\"test-tab-tst\"\n          id=\"test-tabpanel-tst\"\n        >\n          <Editor\n            value={tst}\n            onChange={setTst}\n            grammar={TST.parser}\n            language={\"tst\"}\n            highlight={tstHighlight}\n            disabled={disabled}\n          />\n        </div>\n        <div\n          role=\"tab\"\n          id=\"test-tab-cmp\"\n          aria-controls=\"test-tablpanel-cmp\"\n          aria-selected={selectedTestTab === \"cmp\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-cmp\"\n              value=\"cmp\"\n              checked={selectedTestTab === \"cmp\"}\n              onChange={() => setSelectedTestTab(\"cmp\")}\n            />\n            Compare File\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          aria-labelledby=\"test-tab-cmp\"\n          id=\"test-tabpanel-cmp\"\n          style={{ position: \"relative\" }}\n        >\n          <Editor\n            value={cmp}\n            onChange={setCmp}\n            grammar={CMP.parser}\n            language={\"cmp\"}\n            disabled={disabled}\n          />\n        </div>\n        <div\n          role=\"tab\"\n          id=\"test-tab-out\"\n          aria-controls=\"test-tabpanel-out\"\n          aria-selected={selectedTestTab === \"out\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-out\"\n              value=\"out\"\n              checked={selectedTestTab === \"out\"}\n              onChange={() => setSelectedTestTab(\"out\")}\n            />\n            Output File\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          id=\"test-tabpanel-out\"\n          aria-labelledby=\"test-tab-out\"\n        >\n          <DiffTable cmp={cmp} out={out} />\n        </div>\n      </div>\n    </Panel>\n  );\n};\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { MemoryAdapter, SubMemory } from \"@nand2tetris/simulator/cpu/memory.js\";\nimport { MutableRefObject } from \"react\";\n\nexport class ImmMemory<\n  Action extends { action: \"update\" },\n  Dispatch extends (a: Action) => void\n> extends SubMemory {\n  constructor(\n    parent: MemoryAdapter,\n    private dispatch: MutableRefObject<Dispatch>\n  ) {\n    super(parent, parent.size, 0);\n  }\n\n  override async load(fs: FileSystem, path: string): Promise<void> {\n    await super.load(fs, path);\n    this.dispatch.current({ action: \"update\" } as Action);\n  }\n}\n"],"names":["HACK","Int16Array","reduceCPUTest","cpuTest","dispatch","RAM","ImmMemory","cpu","ROM","Screen","Keyboard","MemoryKeyboard","A","D","PC","useCpuPageStore","useContext","BaseContext","fs","setStatus","storage","useRef","useMemo","test","CPUTest","useTest","reducers","update","state","sim","highlight","currentStep","span","actions","tick","step","resetRAM","loadBytes","current","action","toggleUseTest","resetCPU","reset","this","initialState","makeCpuStore","useImmerReducer","dispatcher","CPU","useState","tst","setTst","out","setOut","cmp","setCmp","runner","useEffect","Timer","stop","className","name","memory","format","editable","type","onChange","checked","role","keyboard","disabled","TestPanel","tstHighlight","AppContext","filePicker","tracking","selectedTestTab","doSetSelectedTestTab","setSelectedTestTab","useCallback","tab","trackEvent","loadTest","select","path","readFile","console","error","header","onClick","style","id","value","grammar","TST","language","position","CMP","parent","size","SubMemory"],"sourceRoot":""}